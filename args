#!/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

# -----------------------------------------------------------------------------
# Copyright (C) Business Learning Incorporated (businesslearninginc.com)
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License at
# <http://www.gnu.org/licenses/> for more details.
#
# -----------------------------------------------------------------------------
#
# bash library for command line argument loading/parsing/validating
#
EXEC_DIR="$(dirname "$(readlink -f "$0")")"
readonly ARGS_FILE="${EXEC_DIR}/data/config.json"

# -----------------------------------------------------------------------------
# get_config_details(), using external jq command, queries data/config.json,
# returning the details object
#
function get_config_details() {
  printf "%s" "$(jq -r '.details.'"$1"'' <"${ARGS_FILE}")"
}

# -----------------------------------------------------------------------------
# get_config_arg(), using external jq command, queries data/config.json,
# returning the arguments object
#
function get_config_arg() {
  printf "%s" "$(jq -r '.arguments['"$1"'].'"$2"'' <"${ARGS_FILE}")"
}

# -----------------------------------------------------------------------------
# get_config_args_length(), using external jq command, queries
# data/config.json, returning the count of arguments
#
function get_config_args_length() {
  printf "%s" "$(jq -r '.arguments|length' <"${ARGS_FILE}")"
}

# -----------------------------------------------------------------------------
# get_config_arg_value() returns argument value text from argument keys
#
function get_config_arg_value() {

  local count_config_args=0
  count_config_args=$(get_config_args_length)

  for ((j = 0; j < count_config_args; j++)); do

    if [ "$1" == "$(get_config_arg "$j" text_string)" ]; then
      echo "${ARG_VALUE[$j]}"
      return
    fi

  done

}

# -----------------------------------------------------------------------------
# scan_for_args() scans command line for arguments, setting global ARG_VALUE[]
#
function scan_for_args() {

  while [[ $# -gt 0 ]]; do

    local count_config_args=0
    count_config_args=$(get_config_args_length)

    for ((j = 0; j < count_config_args; j++)); do

      if [ "$1" == "$(get_config_arg "$j" short_form)" ] || [ "$1" == "$(get_config_arg "$j" long_form)" ]; then
        ARG_VALUE[${j}]="$2"
        break
      fi

    done
    shift # skip to next argument
  done

}

# -----------------------------------------------------------------------------
# check_for_args_completeness() checks for arguments completeness, quitting
# with a message if required arguments are missing
#
function check_for_args_completeness() {

  local count_errs=0
  local count_config_args=0
  count_config_args=$(get_config_args_length)

  for ((j = 0; j < count_config_args; j++)); do

    if [ -z "${ARG_VALUE[${j}]}" ] && [ "$(get_config_arg "$j" required)" == "true" ]; then
      printf "%s\n" "Error: $(get_config_arg "$j" text_string) argument ($(get_config_arg "$j" short_form)|$(get_config_arg "$j" long_form)) missing."
      ((count_errs++))
    fi

  done

  if [ "${count_errs}" -gt 0 ]; then
    quit 1
  fi

}
